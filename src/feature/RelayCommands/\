import {useEffect, useState} from "react";
import {toNumber} from "@opengsn/common";
import {useAccount, useContract, useBlockNumber, useProvider} from "wagmi";


import {useAppSelector, useAppDispatch} from "../../../../hooks";
// import {fetchTokenData} from "../../../../../redux/stakingTokenData/stakingTokenDataActions";
// import {useFormik} from "formik";

import Mint from "./Mint";
import Approve from "./Approve";
import Stake from "./Stake";

import {constants} from "@opengsn/common/dist/Constants";
import {isSameAddress} from "@opengsn/common/dist/Utils";

import relayHubAbi from "../../../../contracts/relayHub.json";
import StakeManagerAbi from "../../../../contracts/stakeManager.json";

export default function StakeWithERC20() {
  // const signer = useSelector((state: RootState) => state.blockchain.provider.getSigner());
  // const account = useSelector((state: RootState) => state.blockchain.account);
  // const stakingToken = useSelector((state: RootState) => state.stakingTokenData);

  const [token, setToken] = useState('Loading..');
  const [stakeManagerAddress, setStakeManagerAddress] = useState('');
  const relay = useAppSelector((state) => state.relay.relay);

  const {
    relayManagerAddress: relayAddress,
    ownerAddress: owner,
    relayHubAddress
  } = relay;

  const provider = useProvider()
  const relayHub = useContract({
    addressOrName: relayHubAddress,
    contractInterface: relayHubAbi,
    signerOrProvider: provider
  });

  // console.log( relayHub.functions.getStakeManager());


  let account: string = "unknown";
  const {data: accountData} = useAccount();
  if (accountData?.address !== undefined) {
    account = accountData.address
  }

  console.log(stakeManagerAddress);
  const stakeManager = useContract({
    addressOrName: stakeManagerAddress,
    contractInterface: StakeManagerAbi,
    signerOrProvider: provider
  })

  const {data: blockNumberData, isFetched: blockNumberFetched, fetchStatus} = useBlockNumber({watch: false, enabled: false})
  let curBlockNumber: number;
  let stakingToken: string;
  if (blockNumberData !== undefined) {
    curBlockNumber = blockNumberData;
  }

  const fetchStakeManagerAddress = async () => {
    const stakeManagerAddress = await relayHub.functions.getStakeManager()
    setStakeManagerAddress(stakeManagerAddress);
  }

  const isRelayOwnerSetOnRelayHub = async () => {
    const newStakeInfo = (await stakeManager.getStakeInfo(relayAddress))[0]
    if (newStakeInfo.owner !== constants.ZERO_ADDRESS && isSameAddress(newStakeInfo.owner, account)) {
      console.log(newStakeInfo);
    }
  }

  const findFirstToken = async () => {
    const fromBlock = (await relayHub.functions.getCreationBlock())[0]
    const toBlock = Math.min(toNumber(fromBlock) + 5000, curBlockNumber)

    const filters = relayHub.filters.StakingTokenDataChanged();
    const tokens = await relayHub.queryFilter(filters, fromBlock._hex, toBlock);
    if (tokens.length === 0 || stakingToken === undefined) {
      // throw new Error(`no registered staking tokens on relayhub ${relayHub.address}`)
    }
    const token = tokens[0].args.token
    console.log(token);
    setToken(token);
  }

  useEffect(() => {
    if (blockNumberData !== undefined && blockNumberFetched === true) {
      findFirstToken();
    }
  }, [blockNumberData])

  useEffect(() => {
    fetchStakeManagerAddress();
  }, [relayHub])

  useEffect(() => {

    isRelayOwnerSetOnRelayHub();

  }, [stakeManager])

  return (
    <>
      <span>Using token: {token}</span>
      <Mint token={token} />
      <Approve token={token} />
      <Stake token={token} />
      <hr />
    </>
  )

}

